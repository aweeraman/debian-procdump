Description: Spelling fixes
Author: Anuradha Weeraman <anuradha@debian.org>
Last-Update: 2020-07-18
Forwarded: yes

--- a/src/CoreDumpWriter.c
+++ b/src/CoreDumpWriter.c
@@ -456,7 +456,7 @@ int WriteCoreDumpInternal(struct CoreDumpWriter *self, char* socketName)
         // If we have a socket name, we're dumping a .NET Core 3+ process....
         if(GenerateCoreClrDump(socketName, coreDumpFileName)==false)
         {
-            Log(error, "An error occured while generating the core dump for .NET 3.x+ process");
+            Log(error, "An error occurred while generating the core dump for .NET 3.x+ process");
         }
         else
         {
@@ -480,7 +480,7 @@ int WriteCoreDumpInternal(struct CoreDumpWriter *self, char* socketName)
         self->Config->gcorePid = gcorePid;
         
         if(commandPipe == NULL){
-            Log(error, "An error occured while generating the core dump");      
+            Log(error, "An error occurred while generating the core dump");
             Trace("WriteCoreDumpInternal: Failed to open pipe to gcore");
             exit(1);
         }
@@ -507,7 +507,7 @@ int WriteCoreDumpInternal(struct CoreDumpWriter *self, char* socketName)
 
         // check if gcore was able to generate the dump
         if(strstr(outputBuffer[i-1], "gcore: failed") != NULL){
-            Log(error, "An error occured while generating the core dump");
+            Log(error, "An error occurred while generating the core dump");
                     
             // log gcore message
             for(int j = 0; j < i; j++){
diff --git a/src/Events.c b/src/Events.c
index 0500e73..a6f4afe 100644
--- a/src/Events.c
+++ b/src/Events.c
@@ -81,7 +81,7 @@ void InitNamedEvent(struct Event *Event, bool IsManualReset, bool InitialState,
     Event->nWaiters = 0;
 
     if (Name == NULL) {
-        sprintf(Event->Name, "Unamed Event %d", ++unamedEventId);  
+        sprintf(Event->Name, "Unnamed Event %d", ++unamedEventId);
     } else if (strlen(Name) >= MAX_EVENT_NAME) {
         strncpy(Event->Name, Name, MAX_EVENT_NAME);
         Event->Name[MAX_EVENT_NAME - 1] = '\0'; // null terminate
diff --git a/src/ProcDumpConfiguration.c b/src/ProcDumpConfiguration.c
index e303a99..cab234d 100644
--- a/src/ProcDumpConfiguration.c
+++ b/src/ProcDumpConfiguration.c
@@ -633,16 +633,16 @@ int WaitForAllThreadsToTerminate(struct ProcDumpConfiguration *self)
     int rc = 0;
     for (int i = 0; i < self->nThreads; i++) {
         if ((rc = pthread_join(self->Threads[i], NULL)) != 0) {
-            Log(error, "An error occured while joining threads\n");
+            Log(error, "An error occurred while joining threads\n");
             exit(-1);
         }
     }
     if ((rc = pthread_cancel(sig_thread_id)) != 0) {
-        Log(error, "An error occured while canceling SignalThread.\n");
+        Log(error, "An error occurred while canceling SignalThread.\n");
         exit(-1);
     }
     if ((rc = pthread_join(sig_thread_id, NULL)) != 0) {
-        Log(error, "An error occured while joining SignalThread.\n");
+        Log(error, "An error occurred while joining SignalThread.\n");
         exit(-1);
     }
     return rc;
diff --git a/src/TriggerThreadProcs.c b/src/TriggerThreadProcs.c
index 5443644..2ab79d7 100644
--- a/src/TriggerThreadProcs.c
+++ b/src/TriggerThreadProcs.c
@@ -47,7 +47,7 @@ void *CommitMonitoringThread(void *thread_args /* struct ProcDumpConfiguration*
             }
             else
             {
-                Log(error, "An error occured while parsing procfs\n");
+                Log(error, "An error occurred while parsing procfs\n");
                 exit(-1);
             }            
         }
@@ -86,7 +86,7 @@ void* ThreadCountMonitoringThread(void *thread_args /* struct ProcDumpConfigurat
             }
             else
             {
-                Log(error, "An error occured while parsing procfs\n");
+                Log(error, "An error occurred while parsing procfs\n");
                 exit(-1);
             }            
         }
@@ -126,7 +126,7 @@ void* FileDescriptorCountMonitoringThread(void *thread_args /* struct ProcDumpCo
             }
             else
             {
-                Log(error, "An error occured while parsing procfs\n");
+                Log(error, "An error occurred while parsing procfs\n");
                 exit(-1);
             }            
         }
@@ -179,7 +179,7 @@ void *CpuMonitoringThread(void *thread_args /* struct ProcDumpConfiguration* */)
             }
             else
             {
-                Log(error, "An error occured while parsing procfs\n");
+                Log(error, "An error occurred while parsing procfs\n");
                 exit(-1);
             }
         }
